import pickle
import sys
from pymongo import MongoClient, DESCENDING
from constants import DB_NAME, ALG_TYPES
from core import extract_features, create_vector_single


if __name__ == '__main__':
    if len(sys.argv) > 1:
        alg = sys.argv[1]
        if alg not in ALG_TYPES:
            print '[!] Algorithm type should be svm, dt, gauss or log.'
        else:
            client = MongoClient()
            db = client[DB_NAME]
            good_apks = list(db.apk.find({"data_type": "goodware"})[1000:])
            good_apk_count = len(good_apks)

            malware_apks = list(db.apk.find({"data_type": "malware"})[500:1000])
            malware_apk_count = len(malware_apks)

            entry = db.train.find().sort([('timestamp', -1)])[0]
            train_data = entry['train_data'].decode('base64')
            clf = pickle.loads(train_data)

            false_count_goodware = 0
            false_count_malware = 0

            for good_apk in good_apks:
                feature_vector = create_vector_single(good_apk)
                result = clf.predict(feature_vector)
                if result[0] == 1:
                    false_count_goodware += 1

            for malware_apk in malware_apks:
                feature_vector = create_vector_single(malware_apk)
                result = clf.predict(feature_vector)
                if result[0] == 0:
                    false_count_malware += 1

            good_true = (good_apk_count - false_count_goodware)*1.0
            good_false = false_count_goodware*1.0 / good_apk_count*1.0

            print '\n'
            print 'Toplam goodware: {}'.format(good_apk_count)
            print 'Yanlis sonuc: {}'.format(false_count_goodware*1.0)
            print 'Dogru sonuc: {}'.format(good_true)
            print '\n'

            mal_true = (malware_apk_count - false_count_malware)*1.0
            mal_false = false_count_malware*1.0 / malware_apk_count*1.0
            print 'Toplam malware:{}'.format(malware_apk_count)
            print 'Yanlis sonuc: {}'.format(false_count_malware*1.0)
            print 'Dogru sonuc: {}'.format(mal_true*1.0)
            print '\n'

            TP = (good_true * 1.0) / (good_apk_count * 1.0)
            TN = (mal_true * 1.0) / (malware_apk_count * 1.0)
            FP = (false_count_goodware * 1.0) / (good_apk_count * 1.0)
            FN = (false_count_malware * 1.0) / (malware_apk_count * 1.0)

            print 'True positive rate: {}'.format(TP)
            print 'True negative rate: {}'.format(TN)
            print 'False positive rate: {}'.format(FP)
            print 'False negative rate: {}'.format(FN)
            print '\n'

    else:
        pass


