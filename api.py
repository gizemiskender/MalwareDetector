from flask import Flask, jsonify, request
from pymongo import MongoClient
from constants import DB_NAME
from core import extract_features, create_vector_single
from celery import Celery
import pickle
import os

app = Flask(__name__)
app.config.update(
    CELERY_BROKER_URL='amqp://guest:guest@localhost:5672//',
    CELERY_RESULT_BACKEND='amqp://guest:guest@localhost:5672//',
)
app.config['UPLOAD_FOLDER'] = "uploads/"

celery = Celery(app.name, broker=app.config['CELERY_BROKER_URL'])
celery.conf.update(app.config)


@celery.task()
def make_analysis(file_path):
    features = extract_features(file_path)
    feature_vector = create_vector_single(features)
    client = MongoClient()
    db = client[DB_NAME]
    entry = db.train.find().sort([('timestamp', -1)])[0]
    train_data = entry['train_data'].decode('base64')
    clf = pickle.loads(train_data)
    result = clf.predict(feature_vector)
    features['report'] = result[0]
    db['apk'].update({'sha256': features['sha256']}, features, upsert=True)
    return True


@app.route("/", methods=['GET'])
def main():
    response = {'msg': 'OK', 'status': True}
    return jsonify(response)


@app.route("/report", methods=['POST'])
def report():
    if request.method == 'POST':
        msg = None
        status = False
        report_id = request.form.get('report_id', None)
        report_response = {}

        if report_id:
            client = MongoClient()
            db = client[DB_NAME]
            result = db.apk.find({"sha256": report_id})
            if result.count():
                report_response = result[0].get('data_type', None)
                if report_response == "goodware":
                    report_response = 0
                else:
                    report_response = 1
            else:
                report_response = None
        else:
            msg = 'You should provide report id'
            status = False

        response = {'msg': msg, 'status': status, 'report': report_response}
        return jsonify(response)


@app.route("/analysis", methods=['POST'])
def analysis():
    if request.method == 'POST':
        f = request.files.get('file', None)
        if f:
            fp = os.path.join(app.config['UPLOAD_FOLDER'], f.filename)
            f.save(fp)
            make_analysis.delay(fp)
            msg = "Analysis is started"
            status = True
        else:
            msg = "You should provide file"
            status = False
        response = {'msg': msg, 'status': status}
        return jsonify(response)


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)
