import pickle
import datetime
import sys
from sklearn import svm
from sklearn import tree
from sklearn import linear_model
from sklearn.naive_bayes import GaussianNB
from pymongo import MongoClient
from constants import DB_NAME, ALG_TYPES
from core import create_vector_multiple

if __name__ == '__main__':
    if len(sys.argv) > 1:
        alg = sys.argv[1]
        if alg not in ALG_TYPES:
            print '[!] Algorithm type should be svm, dt, gauss or log.'
        else:
            client = MongoClient()
            db = client[DB_NAME]
            good_apks = list(db.apk.find({"data_type": "goodware"})[:1000])
            bad_apks = list(db.apk.find({"data_type": "malware"})[:500])
            apks = good_apks + bad_apks
            f, t = create_vector_multiple(apks)
            train_result = {'timestamp': datetime.datetime.now(),
                            'alg_type': alg}
            if alg == 'log':
                clf = linear_model.LogisticRegression()
                clf.fit(f, t)
                s_object = pickle.dumps(clf)
                s_object = s_object.encode('base64')
                train_result['train_data'] = s_object
            elif alg == 'svm':
                C = 1.0
                clf = svm.SVC()
                clf.fit(f, t)
                s_object = pickle.dumps(clf)
                s_object = s_object.encode('base64')
                train_result['train_data'] = s_object
            elif alg == 'dt':
                clf = tree.DecisionTreeClassifier(random_state=0)
                clf.fit(f, t)
                s_object = pickle.dumps(clf)
                s_object = s_object.encode('base64')
                train_result['train_data'] = s_object
            elif alg == 'gauss':
                clf = GaussianNB()
                clf.fit(f, t)
                s_object = pickle.dumps(clf)
                s_object = s_object.encode('base64')
                train_result['train_data'] = s_object

            db['train'].insert_one(train_result)
            print '[+] Data trained and added to database'
    else:
        print '[+] Usage: python {} <alg_type>'.format(__file__)
